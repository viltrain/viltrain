worker_processes  2;

events {
    worker_connections 1024;
}

http {
    server {
        listen 8080;
        error_page 502 /502.html;
        location = /502.html {
          root  /var/nginx/public_html;
        }

        location / {
            resolver 8.8.4.4;  # use Google's open DNS server

            set $target '';
            access_by_lua '
                local key = ngx.var.host
                if not key then
                    ngx.log(ngx.ERR, "no host header found")
                    return ngx.exit(400)
                end
                local cjson = require "cjson"
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 second

                local ok, err = red:connect("192.168.3.1", 6379)
                if not ok then
                    ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                    return ngx.exit(500)
                end

                local list, err = red:hmget("nginx", key)
                local host = list[1]
                if not host then
                    ngx.log(ngx.ERR, "failed to get redis for nginx key: ", err)
                    return ngx.exit(500)
                end

                list, err = red:hmget("docker", key)
                local containerId = list[1]
                if not containerId then
                    ngx.log(ngx.ERR, "failed to get redis for docker key: ", err)
                    return ngx.exit(500)
                end

                if host == ngx.null then
                    ngx.log(ngx.ERR, "no host found for key ", key)
                    local all, err = red:hgetall("nginx")
                    ngx.say("options", cjson.encode(all))
                    return ngx.exit(400)
                end
                
                if string.match(host, "consoleText") then
                      ngx.header.refresh = "5"
                      ngx.log(ngx.ERR, "set refresh header")
                end
                
                if string.match(ngx.var.uri, "/logs$") then
                      ngx.header.refresh = "5"
                      ngx.header["X-Content-Type-Options"] = "nosniff"
                      ngx.log(ngx.ERR, "set refresh header")
                      host = "192.168.3.1:4243/containers/" .. containerId .. "/logs?stderr=1&stdout=1&timestamps=1&follow=0"
                end 

                ngx.var.target = host
            ';
            	
            proxy_pass http://$target;

            proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
        }
    }
}
